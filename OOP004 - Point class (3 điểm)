import java.util.Scanner;
import java.util.Locale; // For consistent decimal formatting
import java.lang.Math; // For Math.sqrt

/**
 * Represents a point in a 2D plane with integer coordinates.
 */
class Point {
    private int x;
    private int y;

    /**
     * Constructor to initialize a Point object.
     * @param x The initial x-coordinate.
     * @param y The initial y-coordinate.
     */
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }

    // --- Task 1: Getters and Setters ---

    /**
     * Gets the x-coordinate.
     * @return The current x-coordinate.
     */
    public int getX() {
        return x;
    }

    /**
     * Sets the x-coordinate.
     * @param x The new x-coordinate.
     */
    public void setX(int x) {
        this.x = x;
    }

    /**
     * Gets the y-coordinate.
     * @return The current y-coordinate.
     */
    public int getY() {
        return y;
    }

    /**
     * Sets the y-coordinate.
     * @param y The new y-coordinate.
     */
    public void setY(int y) {
        this.y = y;
    }

    // --- Task 2: move(dx, dy) Method ---

    /**
     * Moves the point by the specified amounts in the x and y directions.
     * Updates the point's coordinates: x becomes x + dx, y becomes y + dy.
     * @param dx The amount to move along the x-axis.
     * @param dy The amount to move along the y-axis.
     */
    public void move(int dx, int dy) {
        this.x += dx; // Equivalent to this.x = this.x + dx;
        this.y += dy; // Equivalent to this.y = this.y + dy;
    }

    // --- Task 3: distanceTo(Point p) Method ---

    /**
     * Calculates the Euclidean distance between this point and another point p.
     * Formula: sqrt((x2 - x1)^2 + (y2 - y1)^2)
     * @param p The other point to calculate the distance to.
     * @return The calculated distance as a double.
     */
    public double distanceTo(Point p) {
        // Calculate the difference in coordinates
        int deltaX = p.getX() - this.x; // x2 - x1
        int deltaY = p.getY() - this.y; // y2 - y1

        // Calculate the square of the differences
        double distanceSquared = Math.pow(deltaX, 2) + Math.pow(deltaY, 2);

        // Calculate the square root to get the distance
        return Math.sqrt(distanceSquared);
    }
}

// --- Task 4: Main Class ---
public class Main { // Changed class name to Main

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        // Set locale to US to ensure '.' is used as the decimal separator
        scanner.useLocale(Locale.US);

        int numTestCases = Integer.parseInt(scanner.nextLine()); // Read the number of test cases

        for (int i = 0; i < numTestCases; i++) {
            // Read the coordinates for points A and B from a single line
            int xA = scanner.nextInt();
            int yA = scanner.nextInt();
            int xB = scanner.nextInt();
            int yB = scanner.nextInt();
             // Consume the rest of the line including newline character
             if (scanner.hasNextLine()) {
                 scanner.nextLine();
             }

            // Create Point objects
            Point a = new Point(xA, yA);
            Point b = new Point(xB, yB);

            // Move point A by (1, 1)
            a.move(1, 1);

            // Calculate the distance between the *moved* point A and point B
            double distance = a.distanceTo(b);

            // Print the distance formatted to two decimal places
            System.out.printf(Locale.US, "%.2f\n", distance);
        }

        scanner.close(); // Close the scanner
    }
}
