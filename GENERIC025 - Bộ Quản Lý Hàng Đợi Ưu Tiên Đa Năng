import java.util.*;

// Functional interface
interface PriorityFunction<T> {
    int getPriority(T t);
}

// Generic priority queue
class GenericPriorityQueue<T> {
    private PriorityQueue<T> queue;

    public GenericPriorityQueue(Comparator<T> comparator) {
        queue = new PriorityQueue<>(comparator);
    }

    public void add(T item) {
        queue.add(item);
    }

    public T poll() {
        return queue.isEmpty() ? null : queue.poll();
    }

    public boolean isEmpty() {
        return queue.isEmpty();
    }
}

// Patient class
class Patient {
    private String name;
    private int severity;

    public Patient(String name, int severity) {
        this.name = name;
        this.severity = severity;
    }

    public String getName() {
        return name;
    }

    public int getSeverity() {
        return severity;
    }

    @Override
    public String toString() {
        return name + " " + severity;
    }
}

// Task class
class Task {
    private String description;
    private int deadline;

    public Task(String description, int deadline) {
        this.description = description;
        this.deadline = deadline;
    }

    public String getDescription() {
        return description;
    }

    public int getDeadline() {
        return deadline;
    }

    @Override
    public String toString() {
        return description + " " + deadline;
    }
}

// Main program
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        sc.nextLine(); // bỏ số test case (luôn 1)

        GenericPriorityQueue<Patient> patientQueue = null;
        GenericPriorityQueue<Task> taskQueue = null;

        while (sc.hasNextLine()) {
            String line = sc.nextLine().trim();
            if (line.equals("End")) break;

            String[] tokens = line.split(" ");
            String command = tokens[0];

            switch (command) {
                case "NewPatientQueue":
                    patientQueue = new GenericPriorityQueue<>(
                        (a, b) -> Integer.compare(b.getSeverity(), a.getSeverity())
                    );
                    break;

                case "AddPatient":
                    String pname = tokens[1];
                    int severity = Integer.parseInt(tokens[2]);
                    if (patientQueue != null)
                        patientQueue.add(new Patient(pname, severity));
                    break;

                case "PollPatient":
                    if (patientQueue != null && !patientQueue.isEmpty())
                        System.out.println(patientQueue.poll());
                    else
                        System.out.println("Empty");
                    break;

                case "NewTaskQueue":
                    taskQueue = new GenericPriorityQueue<>(
                        Comparator.comparingInt(Task::getDeadline)
                    );
                    break;

                case "AddTask":
                    String desc = tokens[1];
                    int deadline = Integer.parseInt(tokens[2]);
                    if (taskQueue != null)
                        taskQueue.add(new Task(desc, deadline));
                    break;

                case "PollTask":
                    if (taskQueue != null && !taskQueue.isEmpty())
                        System.out.println(taskQueue.poll());
                    else
                        System.out.println("Empty");
                    break;
            }
        }
    }
}
